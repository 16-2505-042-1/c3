#!/bin/bash
# C3 sudoku solver
# Apache v2.0 - Copyright 2017 - rkx1209

[ -e test_template.sh ] && . ./test_template.sh

# calculate n_C_r combination
combination() {
  n=$1
  r=$2
  res=1
  div=1
  for i in `seq 0 $(($r-1))`; do
    res=$(($res*($n-$i)))
  done
  for i in `seq 1 $r`; do
    div=$(($div*$i))
  done
  echo $(($res/$div))
  return
}

entry_num() {
  x=$1
  y=$2
  num=$3
  echo $((($y * $SIZE + $x) * $SIZE + $num))
  return
}

board_to_cnf() {
  BOARD=$1
  SIZE=$2
  CNFFILE=$3
  BSIZE=$((${SIZE}*${SIZE}))
  FILLNUM=0
  for b in ${BOARD[@]}; do
    if [ $b -ne 0 ]; then
      FILLNUM=$(($FILLNUM + 1))
    fi
  done
  PAIRNUM=`combination $SIZE 2`
  #echo $PAIRNUM, $FILLNUM
  CNFNUM=$(($PAIRNUM * $SIZE * $SIZE * 3 + $BSIZE + $FILLNUM))
  VALNUM=$((${BSIZE} * ${SIZE}))
  INPUT="c Generated by auto sudoku generator
p cnf ${VALNUM} ${CNFNUM}
"
  # [Rule 1] Every cell has a number of [1, $SIZE]
  for l in `seq 1 $VALNUM`; do
    INPUT="${INPUT}$l "
    if [ $(($l % $SIZE)) -eq 0 ]; then
      INPUT="${INPUT}0
"
    fi
  done

  # [Rule 2] All raws have no duplicate numbers
  for y in `seq 0 $(($SIZE-1))`; do
    for num in `seq 1 $(($SIZE))`; do
      #echo "y="$y,"num="$num
      for x1 in `seq 0 $(($SIZE-1))`; do
        for x2 in `seq $(($x1+1)) 1 $(($SIZE-1))`; do
          #echo "x1=$x1,x2=$x2"
          num1=`entry_num $x1 $y $num`
          num2=`entry_num $x2 $y $num`
          #echo $num1,$num2
          INPUT="${INPUT}$((-$num1)) $((-$num2)) 0
"
        done
      done
    done
  done

  # [Rule 3] All columns have no duplicate numbers
  for x in `seq 0 $(($SIZE-1))`; do
    for num in `seq 1 $(($SIZE))`; do
      #echo "y="$y,"num="$num
      for y1 in `seq 0 $(($SIZE-1))`; do
        for y2 in `seq $(($y1+1)) 1 $(($SIZE-1))`; do
          #echo "x1=$x1,x2=$x2"
          num1=`entry_num $x $y1 $num`
          num2=`entry_num $x $y2 $num`
          #echo $num1,$num2
          INPUT="${INPUT}$((-$num1)) $((-$num2)) 0
"
        done
      done
    done
  done

  # [Rule 4] All blocks have no duplicate numbers
  # XXX: bit ugly
  for y in `seq 0 $(($SIZE/2)) $(($SIZE-1))`; do
    for x in `seq 0 $(($SIZE/2)) $(($SIZE-1))`; do
      for num in `seq 1 $(($SIZE))`; do
      #echo "y="$y,"x="$x,"num="$num
        for y1 in `seq $y 1 $(($y+$SIZE/2-1))`; do
          for x1 in `seq $x 1 $(($x+$SIZE/2-1))`; do
            for y2 in `seq $y 1 $(($y+$SIZE/2-1))`; do
              for x2 in `seq $x 1 $(($x+$SIZE/2-1))`; do
                if [ $y1 -lt $y2 ]; then
                  continue
                fi
                if [ $y1 -eq $y2 -a $x1 -le $x2 ]; then
                  continue
                fi
                #printf "(%d,%d) (%d,%d)\n" $y1 $x1 $y2 $x2
                num1=`entry_num $x1 $y1 $num`
                num2=`entry_num $x2 $y2 $num`
                INPUT="${INPUT}$((-$num1)) $((-$num2)) 0
"
              done
            done
          done
        done
      done
    done
  done

  # [Rule 5] Add literals of exist cells
  for y in `seq 0 $(($SIZE-1))`; do
    for x in `seq 0 $(($SIZE-1))`; do
      cell=${BOARD[$(($y * $SIZE + $x))]}
      if [ $cell -gt 0 ]; then
        num=`entry_num $x $y $cell`
        #printf "(%d,%d)(%d)=>%d\n" $y $x $num $cell
        INPUT="${INPUT}$num 0
"
      fi
    done
  done
  #echo "$INPUT"
  printf "%s" "${INPUT}" > ${CNFFILE}
}

solve_sudoku() {
  NAME='sudoku cnf'
  FILE=/tmp/sudoku.cnf
  BOARD=(0 0 0 4 0 0 1 2 0 1 4 3 4 3 2 1)
  board_to_cnf $BOARD 4 $FILE
  EXPECT='Verifying.... [SUCCESS]'
  run_test
}

solve_sudoku
